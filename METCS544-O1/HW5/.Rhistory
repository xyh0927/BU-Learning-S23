#part1
boston <- read.csv("https://people.bu.edu/kalathur/datasets/bostonCityEarnings.csv", colClasses = c("character", "character", "character", "integer", "character"))
#a
# Plot histogram
hist(boston$Total.Earnings, breaks = seq(0, 400000, 50000), xlab = "Total Earnings", ylab = "Frequency", main = "Histogram of Employee Earnings")
boston$Total.Earning
hist(boston$Earnings, breaks=seq(0, 400000, 50000), xaxt='n')
axis(1, at=seq(0, 400000, 50000), labels=seq(0, 400000, 50000))
mean_earnings <- mean(boston$Earnings)
sd_earnings <- sd(boston$Earnings)
#a
hist(boston$Earnings, breaks=seq(0, 400000, 50000), xaxt='n')
axis(1, at=seq(0, 400000, 50000), labels=seq(0, 400000, 50000))
mean_earnings <- mean(boston$Earnings)
mean_earnings
sd_earnings <- sd(boston$Earnings)
sd_earnings
#b
set.seed(4447) # set start seed as the last 4 digits of my BU id
sample_means_10 <- replicate(1000, mean(sample(boston$Earnings, size=10, replace=FALSE)))
hist(sample_means_10, breaks=seq(0, 120000, 10000))
sample_means_10
hist(sample_means_10, breaks=seq(0, 120000, 10000))
set.seed(4447) # set start seed as the last 4 digits of my BU id
sample_means_40 <- replicate(1000, mean(sample(boston$Earnings, size=40, replace=FALSE)))
hist(sample_means_40, breaks=seq(0, 120000, 10000))
#a
hist(boston$Earnings, xlim=c(40000,400000))
for(i in 1:5000){
sample <- sample(boston$Earnings,10)
sample_10 <- c(sample_10,mean(sample))
}
sample_10 <- c(sample_10,mean(sample))
#b
sample_10 <- 0
for(i in 1:5000){
sample <- sample(boston$Earnings,10)
sample_10 <- c(sample_10,mean(sample))
}
hist(sample_10)
sample_mean_10 <- mean(sample_10)
sample_mean_10
sample_sd_10 <- sd(sample_10)
sample_sd_10
#b
sample_10 <- mean(sample)
for(i in 1:5000){
sample <- sample(boston$Earnings,10)
sample_10 <- c(sample_10,mean(sample))
}
hist(sample_10)
sample_mean_10 <- mean(sample_10)
sample_mean_10
sample_sd_10 <- sd(sample_10)
sample_sd_10
for(i in 1:5000){
sample <- sample(boston$Earnings,10)
sample_10 <- mean(sample)
sample_10 <- c(sample_10,mean(sample))
}
hist(sample_10)
sample_mean_10 <- mean(sample_10)
sample_mean_10
sample_sd_10 <- sd(sample_10)
sample_sd_10
sample_10 <- mean(sample)
for(i in 1:5000){
sample <- sample(boston$Earnings,10)
sample_10 <- c(sample_10,mean(sample))
}
hist(sample_10)
sample_mean_10 <- mean(sample_10)
sample_mean_10
sample_sd_10 <- sd(sample_10)
sample_sd_10
#c
sample_40 <- mean(sample)
for(i in 1:5000){
sample <- sample(boston$Earnings,40)
sample_40 <- c(sample_40,mean(sample))
}
hist(sample_40)
sample_mean_40 <- mean(sample_40)
sample_mean_40
sample_sd_40 <- sd(sample_40)
sample_sd_40
set.seed(4447)
#c
sample_40 <- mean(sample)
sample_means_10 <- replicate(1000, mean(sample(boston$Earnings, size=10, replace=FALSE)))
sample_means_10
hist(sample_means_10, breaks=seq(0, 120000, 10000))
set.seed(9073)  # Use the last 4 digits of your BU id here
# Draw 1000 samples of size 10
sample_means <- replicate(1000, mean(sample(boston$Total.Earnings, size = 10, replace = FALSE)))
# Draw 1000 samples of size 10
sample_means <- replicate(1000, mean(sample(boston$Earnings, size = 10, replace = FALSE)))
# Show the histogram of sample means
hist(sample_means, xlab = "Sample Means", main = "Histogram of Sample Means (n = 10)")
abline(v = mean(sample_means), col = "red")
set.seed(9286)  # Use the last 4 digits of your BU id here
# Draw 1000 samples of size 10
sample_means <- replicate(1000, mean(sample(boston$Earnings, size = 10, replace = FALSE)))
# Show the histogram of sample means
hist(sample_means, xlab = "Sample Means", main = "Histogram of Sample Means (n = 10)")
abline(v = mean(sample_means), col = "red")
#c
# Set the seed for random numbers
set.seed(9286)  # Use the last 4 digits of your BU id here
# Draw 1000 samples of size 40
sample_means <- replicate(1000, mean(sample(boston$Earnings, size = 40, replace = FALSE)))
# Show the histogram of sample means
hist(sample_means, xlab = "Sample Means", main = "Histogram of Sample Means (n = 40)")
abline(v = mean(sample_means), col = "red")
set.seed(9286)  # Use the last 4 digits of your BU id here
# Draw 1000 samples of size 10
sample_means_10<- replicate(1000, mean(sample(boston$Earnings, size = 10, replace = FALSE)))
# Show the histogram of sample means
hist(sample_means_10, xlab = "Sample Means", main = "Histogram of Sample Means (n = 10)")
abline(v = mean(sample_means_10), col = "red")
sample_means_10_mean <- mean(sample_means_10)
sample_means_10_sd <- sd(sample_means_10)
#c
# Set the seed for random numbers
set.seed(9286)  # Use the last 4 digits of your BU id here
# Draw 1000 samples of size 40
sample_means_40 <- replicate(1000, mean(sample(boston$Earnings, size = 40, replace = FALSE)))
# Show the histogram of sample means
hist(sample_means_40, xlab = "Sample Means", main = "Histogram of Sample Means (n = 40)")
abline(v = mean(sample_means_40), col = "red")
sample_means_40_mean <- mean(sample_means_40)
sample_means_40_sd <- sd(sample_means_40)
sample_means_10_mean
sample_means_10_sd
sample_means_40_mean
sample_means_40_sd
set.seed(9286) # using the last 4 digits of my BU ID
nbinom_data <- rnbinom(1000, size = 3, prob = 0.5)
library(ggplot2)
df <- data.frame(x = factor(nbinom_data, levels = unique(nbinom_data)), prop = prop.table(table(nbinom_data)))
set.seed(9286)
nbinom_data <- rnbinom(1000, size = 3, prob = 0.5)
prop_table <- table(nbinom_data)/length(nbinom_data)
barplot(prop_table, main = "Proportions of Distinct Values",
xlab = "Values", ylab = "Proportions")
set.seed(9286)
sample_size <- c(10, 20, 30, 40)
n_samples <- 5000
samples <- lapply(sample_size, function(x) replicate(n_samples, sample(nbinom_data, size = x, replace = FALSE)))
par(mfrow = c(2, 2))
for (i in seq_along(sample_size)) {
means <- apply(samples[[i]], 2, mean)
hist(means, main = paste0("Sample Size = ", sample_size[i]), xlab = "Sample Mean", prob = TRUE)
lines(density(means))
}
#c
data_summary <- data.frame(Dataset = c("Original Data", "Sample Size = 10", "Sample Size = 20", "Sample Size = 30", "Sample Size = 40"),
Mean = c(mean(nbinom_data), sapply(samples, function(x) mean(x)), NA),
SD = c(sd(nbinom_data), sapply(samples, function(x) sd(x)), NA))
data_summary <- data.frame(Dataset = c("Original Data", "Sample Size = 10", "Sample Size = 20", "Sample Size = 30", "Sample Size = 40"),
Mean = c(mean(nbinom_data), sapply(samples, function(x) mean(x))),
SD = c(sd(nbinom_data), sapply(samples, function(x) sd(x))))
print(data_summary)
# Compute the top 5 departments based on the number of employees
top_departments <- names(sort(table(boston$Department), decreasing = TRUE))[1:5]
# Create a subset of the dataset with the top 5 departments
top_employees <- boston[boston$Department %in% top_departments, ]
set.seed(9286)
sample_size <- 50
srs <- top_employees[sample(nrow(top_employees), sample_size, replace = TRUE), ]
# Show the frequencies for the selected departments
freq_srs <- table(srs$Department)
freq_srs
# Show the percentages of these with respect to sample size
prop_srs <- prop.table(freq_srs) * 100
prop_srs
# Calculate the inclusion probabilities using the Earnings variable
inc_prob <- top_employees$Earnings / sum(top_employees$Earnings)
# Draw a systematic sample with unequal probabilities
sys <- top_employees[cumsum(inc_prob) >= seq(0, 1, length.out = sample_size + 1)[-sample_size], ]
# Show the frequencies for the selected departments
freq_sys <- table(sys$Department)
freq_sys
# Show the percentages of these with respect to sample size
prop_sys <- prop.table(freq_sys) * 100
prop_sys
# Order the data using the Department variable
ordered_top_employees <- top_employees[order(top_employees$Department), ]
# Compute the proportional sizes for each department
prop_sizes <- table(ordered_top_employees$Department) / nrow(ordered_top_employees)
# Compute the number of samples to draw from each stratum
stratum_sizes <- round(prop_sizes * sample_size)
# Draw a stratified sample using proportional sizes
strat <- ordered_top_employees[unlist(mapply(seq, from = 1, to = nrow(ordered_top_employees), by = stratum_sizes, SIMPLIFY = FALSE)), ]
# Show the frequencies for the selected departments
freq_strat <- table(strat$Department)
freq_strat
# Show the percentages of these with respect to sample size
prop_strat <- prop.table(freq_strat) * 100
prop_strat
# Order the data using the Department variable
ordered_top_employees <- top_employees[order(top_employees$Department), ]
# Compute the proportional sizes for each department
prop_sizes <- table(ordered_top_employees$Department) / nrow(ordered_top_employees)
# Compute the number of samples to draw from each stratum
stratum_sizes <- round(prop_sizes * sample_size)
# Draw a stratified sample using proportional sizes
strat <- ordered_top_employees[unlist(mapply(seq, from = 1, to = nrow(ordered_top_employees), by = stratum_sizes, SIMPLIFY = FALSE)), ]
# Show the frequencies for the selected departments
freq_strat <- table(strat$Department)
freq_strat
# Show the percentages of these with respect to sample size
prop_strat <- prop.table(freq_strat) * 100
prop_strat
#d
# calculate mean earnings for the full dataset
mean_earnings <- mean(top5$Earnings)
boston <- read.csv("https://people.bu.edu/kalathur/datasets/bostonCityEarnings.csv", colClasses = c("character", "character", "character", "integer", "character"))
top_5 <- names(sort(table(boston$Department), decreasing = TRUE))[1:5]
subset_a <- boston[boston$Department %in% top_5, ]
set.seed(5210)
sample_a <- subset_a[sample(nrow(subset_a), 50, replace = TRUE), ]
table_a <- table(sample_a$Department)
prop_a <- round(prop.table(table_a) * 100, 2)
boston <- read.csv("https://people.bu.edu/kalathur/datasets/bostonCityEarnings.csv", colClasses = c("character", "character", "character", "integer", "character"))
top_5 <- names(sort(table(boston$Department), decreasing = TRUE))[1:5]
subset_a <- boston[boston$Department %in% top_5, ]
set.seed(5210)
sample_a <- subset_a[sample(nrow(subset_a), 50, replace = TRUE), ]
table_a <- table(sample_a$Department)
table_a
prop_a <- round(prop.table(table_a) * 100, 2)
prop_a
earnings <- as.numeric(boston$Earnings)
p <- earnings / sum(earnings)
cum_p <- cumsum(p)
start <- runif(1, min = 0, max = 1 / 50)
indices <- seq(from = start, to = 1, by = 1 / 50)
sample_b <- subset_a[findInterval(indices, cum_p) + 1, ]
table_b <- table(sample_b$Department)
table_b
prop_b <- round(prop.table(table_b) * 100, 2)
prop_b
#c
library(survey)
install.packages("survey")
#c
library(survey)
strata <- as.factor(subset_a$Department)
sizes <- table(strata)
sampsize <- as.integer(sizes/sum(sizes) * 50)
dstrat <- strata(design = list(data = subset_a), strata = strata, weights = rep(1, nrow(subset_a)), size = sampsize)
library(survey)
strata <- as.factor(subset_a$Department)
sizes <- table(strata)
sampsize <- as.integer(sizes/sum(sizes) * 50)
dstrat <- strata(design = list(data = subset_a), strata = strata, size = sampsize)
library(survey)
strata <- as.factor(subset_a$Department)
sizes <- table(strata)
sampsize <- as.integer(sizes/sum(sizes) * 50)
# check lengths of strata and sampsize
length(strata)
length(sampsize)
# adjust sampsize to match length of strata
sampsize <- sampsize[match(levels(strata), levels(sampsize))]
# check lengths again
length(strata)
length(sampsize)
dstrat <- strata(design = list(data = subset_a), strata = strata, size = sampsize)
library(survey)
# Remove strata with less than 3 employees
strata_sizes <- table(strata)
strata_sizes <- strata_sizes[strata_sizes >= 3]
strata <- strata[strata %in% names(strata_sizes)]
subset_a <- subset_a[subset_a$Department %in% names(strata_sizes), ]
# Create stratified sample
sampsize <- as.integer(strata_sizes/sum(strata_sizes) * 50)
dstrat <- strata(design = list(data = subset_a), strata = strata, size = sampsize)
mean_data <- mean(as.numeric(boston$Earnings))
mean_a <- mean(as.numeric(sample_a$Earnings))
mean_b <- mean(as.numeric(sample_b$Earnings))
mean_c <- mean(as.numeric(sample_c$Earnings))
dept_freq <- sort(table(boston$Department), decreasing = TRUE)
top_5_depts <- names(dept_freq)[1:5]
boston_top5 <- boston[boston$Department %in% top_5_depts, ]
set.seed(9286)
#a
srs_mean <- mean(boston_top5[srs, "Earnings"])
srs_mean <- mean(boston_top5$Earnings)
srs_diff <- srs_mean - mean_earnings
srs_diff
top5 <- head(sort(table(boston$Department), decreasing = TRUE), 5)
top5_depts <- names(top5)
set.seed(9286)
srs <- boston[boston$Department %in% top5_depts, ][sample(1:length(top5_depts), 50, replace = TRUE), ]
table(srs$Department)
prop.table(table(srs$Department))
boston$earnings_prob <- boston$Earnings / sum(boston$Earnings)
boston$earnings_cumprob <- cumsum(boston$earnings_prob)
boston$earnings_prob <- boston$Earnings / sum(boston$Earnings)
boston$earnings_cumprob <- cumsum(boston$earnings_prob)
set.seed(9286)
systematic <- boston[boston$Department %in% top5_depts, ][seq(from = 1, to = length(top5_depts), length.out = 50, along.with = top5_depts), ]
table(systematic$Department)
prop.table(table(systematic$Department))
install.packages("sampling")
library(sampling)
boston$strata <- as.numeric(factor(boston$Department, levels = top5_depts))
set.seed(9286)
stratified <- strata(boston, stratanames = "strata", size = 50, method = "srswor")
library(sampling)
boston$strata <- as.numeric(factor(boston$Department, levels = top5_depts))
strata_sizes <- prop.table(table(boston$strata)) * 50
strata_sizes <- as.integer(strata_sizes)
set.seed(8588)
stratified <- strata(boston, stratanames = "strata", size = strata_sizes, method = "srswor")
library(sampling)
boston$strata <- as.numeric(factor(boston$Department, levels = top5_depts))
strata_sizes <- prop.table(table(boston$strata)) * 50
strata_sizes <- as.integer(strata_sizes)
# Only include non-empty strata in the strata() function
nonempty_strata <- which(strata_sizes > 0)
stratified <- strata(boston[boston$strata %in% nonempty_strata,], stratanames = "strata", size = strata_sizes[nonempty_strata], method = "srswor")
table(stratified$Department)
prop.table(table(stratified$Department))
library(sampling)
boston$strata <- as.numeric(factor(boston$Department, levels = top5_depts))
strata_sizes <- prop.table(table(boston$strata)) * 50
strata_sizes <- as.integer(strata_sizes)
# Only include non-empty strata in the strata() function
nonempty_strata <- which(strata_sizes > 0)
stratified <- strata(boston[boston$strata %in% nonempty_strata,], stratanames = "strata", size = strata_sizes[nonempty_strata], method = "srswor")
table(stratified$Department)
prop.table(table(stratified$Department))
set.seed(9286)  # Replace with the last 4 digits of your BU id
n <- 50  # sample size
srs <- subset[sample(nrow(subset), n, replace = TRUE), ]
dept_table <- table(boston$Department)
top_5_depts <- names(sort(dept_table, decreasing = TRUE)[1:5])
subset <- boston[boston$Department %in% top_5_depts, ]
#a
set.seed(9286)  # Replace with the last 4 digits of your BU id
n <- 50  # sample size
srs <- subset[sample(nrow(subset), n, replace = TRUE), ]
dept_freq <- table(srs$Department)
dept_pct <- round(dept_freq / n * 100, 2)
dept_table <- table(boston$Department)
top_5_depts <- names(sort(dept_table, decreasing = TRUE)[1:5])
subset <- boston[boston$Department %in% top_5_depts, ]
#a
set.seed(9286)  # Replace with the last 4 digits of your BU id
n <- 50  # sample size
srs <- subset[sample(nrow(subset), n, replace = TRUE), ]
dept_freq <- table(srs$Department)
dept_freq
dept_pct <- round(dept_freq / n * 100, 2)
dept_pct
#b
subset$Earnings_group <- cut(subset$Earnings, breaks = c(0, 10000, 20000, 30000, 40000, 50000, Inf))
earnings_prob <- prop.table(table(subset$Earnings_group))
cum_prob <- cumsum(earnings_prob)
start <- runif(1)
indices <- as.integer((start + seq(0, 1, length.out = n)) / diff(cum_prob)[1]) + 1
systematic_sample <- subset[indices, ]
dept_freq <- table(systematic_sample$Department)
dept_freq
dept_pct <- round(dept_freq / n * 100, 2)
dept_pct
#part3
dept_table <- table(boston$Department)
top_5_depts <- names(sort(dept_table, decreasing = TRUE)[1:5])
subset <- boston[boston$Department %in% top_5_depts, ]
#a
set.seed(9286)  # Replace with the last 4 digits of your BU id
n <- 50  # sample size
srs <- subset[sample(nrow(subset), n, replace = TRUE), ]
dept_freq <- table(srs$Department)
dept_freq
dept_pct <- round(dept_freq / n * 100, 2)
dept_pct
#b
subset$Earnings_group <- cut(subset$Earnings, breaks = c(0, 10000, 20000, 30000, 40000, 50000, Inf))
earnings_prob <- prop.table(table(subset$Earnings_group))
cum_prob <- cumsum(earnings_prob)
start <- runif(1)
indices <- as.integer((start + seq(0, 1, length.out = n)) / diff(cum_prob)[1]) + 1
systematic_sample <- subset[indices, ]
dept_freq <- table(systematic_sample$Department)
dept_freq
dept_pct <- round(dept_freq / n * 100, 2)
dept_pct
set.seed(9286)
subset$Earnings_group <- cut(subset$Earnings, breaks = c(0, 10000, 20000, 30000, 40000, 50000, Inf))
earnings_prob <- prop.table(table(subset$Earnings_group))
cum_prob <- cumsum(earnings_prob)
start <- runif(1)
indices <- as.integer((start + seq(0, 1, length.out = n)) / diff(cum_prob)[1]) + 1
systematic_sample <- subset[indices, ]
dept_freq <- table(systematic_sample$Department)
dept_freq
dept_pct <- round(dept_freq / n * 100, 2)
dept_pct
top5_depts <- head(sort(table(boston$Department), decreasing = TRUE), n = 5)
boston_top5 <- boston[boston$Department %in% names(top5_depts), ]
set.seed(9316)
# Simple random sample with replacement
srs <- sample(boston_top5$Department, size = 50, replace = TRUE)
# Frequencies and percentages of selected departments
table_srs <- table(srs)
prop_srs <- prop.table(table_srs)
# Print results
print(table_srs)
print(prop_srs)
# Calculate inclusion probabilities using Earnings variable
earnings_prop <- boston_top5$Earnings / sum(boston_top5$Earnings)
# Systematic sample with unequal probabilities
sys_prob <- rep(earnings_prop, each = 1)
sys <- boston_top5$Department[seq(1, nrow(boston_top5), length.out = 50, along.with = sys_prob)]
# Frequencies and percentages of selected departments
table_sys <- table(sys)
prop_sys <- prop.table(table_sys)
# Print results
print(table_sys)
print(prop_sys)
#c
# Order data by Department variable
boston_top5_ord <- boston_top5[order(boston_top5$Department), ]
# Split data by department
dept_list <- split(boston_top5_ord, f = boston_top5_ord$Department)
# Stratified sample with proportional sizes
strat <- unlist(lapply(dept_list, function(x) {
size <- round(nrow(x) / nrow(boston_top5_ord) * 50)
sample(x$Department, size = size, replace = TRUE)
}))
table_strat <- table(strat)
prop_strat <- prop.table(table_strat)
print(table_strat)
print(prop_strat)
#part3
top5_depts <- head(sort(table(boston$Department), decreasing = TRUE), n = 5)
boston_top5 <- boston[boston$Department %in% names(top5_depts), ]
set.seed(9286)
#a
srs <- sample(boston_top5$Department, size = 50, replace = TRUE)
table_srs <- table(srs)
prop_srs <- prop.table(table_srs)
print(table_srs)
print(prop_srs)
#b
earnings_prop <- boston_top5$Earnings / sum(boston_top5$Earnings)
sys_prob <- rep(earnings_prop, each = 1)
sys <- boston_top5$Department[seq(1, nrow(boston_top5), length.out = 50, along.with = sys_prob)]
table_sys <- table(sys)
prop_sys <- prop.table(table_sys)
print(table_sys)
print(prop_sys)
#c
boston_top5_ord <- boston_top5[order(boston_top5$Department), ]
dept_list <- split(boston_top5_ord, f = boston_top5_ord$Department)
strat <- unlist(lapply(dept_list, function(x) {
size <- round(nrow(x) / nrow(boston_top5_ord) * 50)
sample(x$Department, size = size, replace = TRUE)
}))
table_strat <- table(strat)
prop_strat <- prop.table(table_strat)
print(table_strat)
print(prop_strat)
mean_data <- mean(boston_top5$Earnings)
mean_srs <- mean(boston_top5$Earnings[boston_top5$Department %in% names(table_srs)])
mean_sys <- mean(boston_top5$Earnings[boston_top5$Department %in% names(table_sys)])
mean_strat <- mean(boston_top5$Earnings[boston_top5$Department %in% names(table_strat)])
print(mean_data)
print(mean_srs)
print(mean_sys)
print(mean_strat)
